{"version":3,"sources":["reducers/signupReducer.js","reducers/index.js","actions/types.js","store.js","components/Signup.js","actions/signupActions.js","webConfig.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["initialState","user","combineReducers","signup","state","action","type","payload","login","loginReducer","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","Signup","props","onChange","e","setState","target","name","value","signupFlag","redirectVar","message","this","alert","to","class","onSubmit","placeholder","pattern","title","required","style","color","Component","connect","data","dispatch","axios","defaults","withCredentials","post","then","response","catch","error","Main","path","component","Login","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.980a19f0.chunk.js","sourcesContent":["import { USER_SIGNUP } from '../actions/types';\n\n\n\n\nconst initialState = {\n    user: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case USER_SIGNUP:\n            return {\n                ...state,\n                user: action.payload\n            };\n       \n        default:\n            return state;\n    }\n};\n\n\n \n ","import { combineReducers } from 'redux';\n\nimport signupReducer from './signupReducer';\nimport loginReducer from './loginReducer';\n\n\n\nexport default combineReducers({\n    signup: signupReducer,\n    login: loginReducer,\n   \n});","\nexport const USER_SIGNUP = 'USER_SIGNUP';\n\n\n\n\n\n\n\n\n\n\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n    ));\n\nexport default store;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { signup } from '../actions/signupActions'\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\n\n\n\n\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            signupFlag:0\n            \n        };\n        \n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     if (nextProps.user) {\n    //         var { user } = nextProps;\n\n    //         if (user === \"COMPANY_ADDED\" || user === \"COMPANY_EXISTS\") {\n    //             this.setState({\n    //                 signupFlag: 1\n    //             });\n    //         }\n    //     }\n    // }\n\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n\n//     onSubmit = (e) => {\n//         //prevent page from refresh\n//         e.preventDefault();\n       \n//             const data = {\n           \n//                 logic:\"companysignup\",\n//                 companyname : this.state.companyname,\n//                 companymail : this.state.companymail,\n//                 password: this.state.password,\n//                 companylocation : this.state.companylocation\n//             }\n//             console.log(data)\n\n//         this.props.companySignup(data);\n\n\n    \n// }\n\n               \n            \n    render() {\n        //redirect based on successful signup\n        let redirectVar = null;\n        let message = \"\";\n       \n      \n        if (this.props.user === \"COMPANY_ADDED\" && this.state.signupFlag) {\n            alert(\"You have registered successfully\");\n            redirectVar = <Redirect to=\"/Login\" />\n        }\n        if(this.props.user === \"COMPANY_EXISTS\" && this.state.signupFlag){\n            message = \"Email id is already registered\"\n        }\n        \n        \n        \n        return (\n            <div>\n\n             {redirectVar}\n           \n    <div class=\"container\">\n                <div class=\"row\">\n                <div class=\"col-lg-10 col-xl-9 mx-auto\">\n                <div class=\"card card-signin flex-row my-5\">\n                \n                <div class=\"card-body\">\n                <h5 class=\"card-title text-center\"> COMPANY SIGN IN</h5>\n                <form onSubmit={this.onSubmit}>\n                                       \n                                        <div class=\"form-group\">\n                                            <input type=\"email\" class=\"form-control\" name=\"companymail\" onChange={this.onChange} placeholder=\"Email Id\" pattern=\"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$'%&*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])$\" title=\"Please enter valid email address\" required />\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <input type=\"password\" class=\"form-control\" name=\"password\" onChange={this.onChange} placeholder=\"Password\" required />\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <input type=\"text\" class=\"form-control\" name=\"companyname\" onChange={this.onChange} placeholder=\"company name\" required />\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <input type=\"text\" class=\"form-control\" name=\"companylocation\" onChange={this.onChange} placeholder=\"company location\" required />\n                                        </div>\n                                        <div style={{ color: \"#ff0000\" }}>{message}</div><br />\n                                        <button type=\"submit\" class=\"btn btn-primary\">Signup</button><br /><br/>\n                                        <div>Already have an account? <Link to='/CompanyLogin'>Login</Link></div>\n                                        \n                                    </form>\n                \n                </div>\n                </div> \n                </div>\n                </div> \n                </div>  \n                </div>\n        )\n       \n\n    }\n}\n\nSignup.propTypes = {\n    signup:PropTypes.func.isRequired,\n \n    user: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => {\n   \n        return ({\n            user: state.signup.user\n        })\n  \n    \n  };\n\n\n\nexport default connect(mapStateToProps, { signup })(Signup);","import { USER_SIGNUP} from \"./types\";\n\nimport {rooturl} from '../webConfig';\n\nimport axios from \"axios\";\n\n// export const studentSignup = (studentData) => dispatch => {\n//     axios.defaults.withCredentials = true;\n//     axios.defaults.headers.common['authorization'] = sessionStorage.getItem('token');\n//     axios.post(`${rooturl}/student/studentsignup`, studentData)\n//         .then(response => dispatch({\n//             type: STUDENT_SIGNUP,\n//             payload: response.data\n//         }))\n//         .catch(error => {\n//             if (error.response && error.response.data) {\n//                 return dispatch({\n//                     type: STUDENT_SIGNUP,\n//                     payload: error.response.data\n//                 });\n//             }\n//             return;\n//         });\n// }\n\n// export const companySignup = (companyData) => dispatch => {\n//     axios.defaults.withCredentials = true;\n//     axios.defaults.headers.common['authorization'] = sessionStorage.getItem('token');\n//     axios.post(`${rooturl}/company/companysignup`, companyData)\n//         .then(response => \n//             {console.log(response.data);\n//             dispatch({\n//             type: COMPANY_SIGNUP,\n//             payload: response.data\n            \n//         })})\n        \n//         .catch(error => {\n//             if (error.response && error.response.data) {\n//                 return dispatch({\n//                     type: COMPANY_SIGNUP,\n//                     payload: error.response.data\n//                 });\n//             }\n//             return;\n//         });\n// }\nexport const signup = (data) => dispatch => {\n    axios.defaults.withCredentials = true;\n   // axios.defaults.headers.common['authorization'] = sessionStorage.getItem('token');\n    axios.post(`${rooturl}/signup/`, data)\n        .then(response => dispatch({\n            type:USER_SIGNUP,\n            payload: response.data\n        }))\n        .catch(error => {\n            if (error.response && error.response.data) {\n                return dispatch({\n                    type: USER_SIGNUP,\n                    payload: error.response.data\n                });\n            }\n        });\n}\n\n// export const studentLogout = () => dispatch => dispatch({type: STUDENT_LOGOUT});\n\n// export const companyLogin = (loginData) => dispatch => {\n//     axios.defaults.withCredentials = true;\n//     axios.defaults.headers.common['authorization'] = sessionStorage.getItem('token');\n//     axios.post(`${rooturl}/company/companylogin`, loginData)\n//         .then(response => dispatch({\n//             type: COMPANY_LOGIN,\n//             payload: response.data\n//         }))\n//         .catch(error => {\n//             if (error.response && error.response.data) {\n//                 return dispatch({\n//                     type: COMPANY_LOGIN,\n//                     payload: error.response.data\n//                 });\n//             }\n//         });\n// }\n\n// export const companyLogout = () => dispatch => dispatch({type: COMPANY_LOGOUT});","export const rooturl = \"http://localhost:5000\";","import React, {Component} from 'react';\nimport {Route} from 'react-router-dom';\n\n\nimport Signup from './Signup';\nimport Login from './Login';\n\n\nclass Main extends Component {\n    render() {\n        return (\n            <div>\n                \n                <Route path=\"/Signup\" component={Signup}/>\n                <Route path=\"/Login\" component={Login}/>\n               \n              \n\n            </div>\n        )\n    }\n}\nexport default Main;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Main from './components/Main.js'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <BrowserRouter>\n          <Main />\n        </BrowserRouter>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}